generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String                @id @default(uuid())
  username       String?               @unique
  name           String
  email          String                @unique
  password       String
  profilePicture String?
  role           Role                  @default(USER)
  isApproved     Boolean               @default(false)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  completed      CompletedResource[]
  notices        Notice[]
  savedResponses SavedTutorResponse[]
  ratings        TutorResponseRating[]
  habits         UserHabit[]
  progress       UserProgress?
  quizProgress   UserQuizProgress[]
  petState       UserPetState[]
  achievements   UserAchievement[]
  badges         UserBadge[]
}

model Notice {
  id          String   @id @default(uuid())
  title       String
  description String
  fileUrl     String?
  uploadedBy  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    String   @default("general")
  priority    String   @default("medium")
  user        User     @relation(fields: [uploadedBy], references: [id])
}

model UserProgress {
  id     String @id @default(uuid())
  userId String @unique
  xp     Int    @default(0)
  streak Int    @default(0)
  user   User   @relation(fields: [userId], references: [id])
}

model UserHabit {
  id         String   @id @default(uuid())
  userId     String
  title      String
  targetDays Int
  completed  Boolean  @default(false)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model Resource {
  id          String              @id @default(uuid())
  title       String
  type        String
  semester    String
  subject     String
  url         String
  createdAt   DateTime            @default(now())
  completedBy CompletedResource[]
}

model CompletedResource {
  id          String   @id @default(uuid())
  userId      String
  resourceId  String
  completedAt DateTime @default(now())
  resource    Resource @relation(fields: [resourceId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model SavedTutorResponse {
  id         String                @id @default(uuid())
  userId     String
  topic      String
  mode       String
  response   String
  flashcards String
  createdAt  DateTime              @default(now())
  user       User                  @relation(fields: [userId], references: [id])
  ratings    TutorResponseRating[]
}

model TutorResponseRating {
  id         String             @id @default(uuid())
  userId     String
  responseId String
  rating     Int
  feedback   String?
  createdAt  DateTime           @default(now())
  response   SavedTutorResponse @relation(fields: [responseId], references: [id])
  user       User               @relation(fields: [userId], references: [id])
}

model UserQuizProgress {
  id        String   @id @default(uuid())
  userId    String   @unique
  quizData  Json     // Stores quiz progress, answers, etc.
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model UserPetState {
  id           String   @id @default(uuid())
  userId       String   @unique
  petType      String?
  petName      String?
  petLevel     Int      @default(0)
  petExperience Int     @default(0)
  petHappiness Int      @default(100)
  petEnergy    Int      @default(100)
  lastFed      DateTime?
  lastPlayed   DateTime?
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model UserAchievement {
  id          String   @id @default(uuid())
  userId      String
  type        String
  title       String
  description String
  icon        String
  earnedAt    DateTime
  user        User     @relation(fields: [userId], references: [id])
}

model UserBadge {
  id        String   @id @default(uuid())
  userId    String
  name      String
  icon      String
  earned    Boolean  @default(false)
  earnedAt  DateTime?
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}
