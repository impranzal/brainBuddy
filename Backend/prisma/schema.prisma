// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql" or "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  username        String?           @unique
  name            String
  email           String            @unique
  password        String
  profilePicture  String?
  role            Role              @default(USER)
  isApproved      Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  progress        UserProgress?
  completed       CompletedResource[]
  habits          UserHabit[]
  savedResponses  SavedTutorResponse[]
  ratings         TutorResponseRating[]
  notices         Notice[]
}

model Notice {
  id          String   @id @default(uuid())
  title       String
  description String
  category    String   @default("general")
  priority    String   @default("medium")
  fileUrl     String?
  uploadedBy  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [uploadedBy], references: [id])
}

model UserProgress {
  id       String   @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @unique
  xp       Int      @default(0)
  streak   Int      @default(0)
}

model UserHabit {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  title       String
  targetDays  Int
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Resource {
  id        String               @id @default(uuid())
  title     String
  type      String               // e.g. "PDF", "Notes", "Question Set"
  semester  String
  subject   String
  url       String
  createdAt DateTime             @default(now())

  completedBy CompletedResource[]
}

model CompletedResource {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  resource   Resource  @relation(fields: [resourceId], references: [id])
  resourceId String
  completedAt DateTime @default(now())
}

model SavedTutorResponse {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  topic      String
  mode       String
  response   String
  flashcards String   // JSON stringified array
  createdAt  DateTime @default(now())
  ratings    TutorResponseRating[]
}

model TutorResponseRating {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  response   SavedTutorResponse @relation(fields: [responseId], references: [id])
  responseId String
  rating     Int
  feedback   String?
  createdAt  DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}